const int trigPin = 14;
const int echoPin = 15;
const byte numeral[10][8] = {
    {1,1,1,1,1,1,0,0}, // 0
    {0,1,1,0,0,0,0,0}, // 1
    {1,1,0,1,1,0,1,0}, // 2
    {1,1,1,1,0,0,1,0}, // 3
    {0,1,1,0,0,1,1,0}, // 4
    {1,0,1,1,0,1,1,0}, // 5
    {0,0,1,1,1,1,1,0}, // 6
    {1,1,1,0,0,0,0,0}, // 7
    {1,1,1,1,1,1,1,0}, // 8
    {1,1,1,0,0,1,1,0}  // 9
}; //A,B,C,D,E,F,G,dp
const int segmentPins[8] = {9,2,3,5,6,8,7,4}; 
// A-11,B-7,C-4,D-2,E-1,F-10,G-5,dp-3
const int digitPins[4] = {13,12,11,10}; 
// DIG4-6,DIG3-8,DIG2-9,DIG1-12
unsigned long count = 0;

const int temp = A2; 

int ldr = A3;

int but1 = 18;
int but2 = 19;


int firstValue;
int mode;
void setup() {
  Serial.begin (9600);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  for(int i=0; i < 8; i++)
    pinMode(segmentPins[i], OUTPUT);
  for(int i=0; i < 4; i++)
    pinMode(digitPins[i], OUTPUT);

  pinMode(but1, INPUT);
  pinMode(but2, INPUT);
}

int duration;
int distanceCm;

void loop() {
  if(mode == 3){
    
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  distanceCm= duration*0.034/2;
 
  }
  int value = analogRead(temp);
  float millivolts = (value / 1024.0) * 5000;
  float celsius = millivolts / 10;


  if(digitalRead(but1)==HIGH && digitalRead(but2)==HIGH) mode = 3;
  else if(digitalRead(but1)==HIGH) mode = 1;
  else if(digitalRead(but2)==HIGH) mode = 2;

  if(mode == 3) showNumber(distanceCm);
  else if(mode == 1) showNumber(analogRead(ldr));
  else if(mode == 2) showNumber(celsius);
  else showNumber(firstValue);
}

void showNumber(int num){
  for(int i = 0; i < 4; i++){
    showDigit(num % 10, i);
    num = num / 10;
  }
}
void showDigit(int digit, int pos){
  if( digit >= 0 && digit <= 9){
    for(int segment = 0; segment < 8; segment++)
      digitalWrite(segmentPins[segment], numeral[digit][segment]);
    digitalWrite(digitPins[pos],LOW);
    delayMicroseconds(300);
    digitalWrite(digitPins[pos],HIGH);
  }
}